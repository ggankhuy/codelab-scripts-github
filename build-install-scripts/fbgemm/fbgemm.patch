diff --git a/fbgemm_gpu/CMakeLists.txt b/fbgemm_gpu/CMakeLists.txt
index 2244ea6f..2de2b27d 100644
--- a/fbgemm_gpu/CMakeLists.txt
+++ b/fbgemm_gpu/CMakeLists.txt
@@ -103,7 +103,7 @@ if(NOT FBGEMM_CPU_ONLY)
   add_subdirectory(experimental/gemm)
 endif()
 
-if(NOT FBGEMM_CPU_ONLY AND NOT USE_ROCM)
+if(NOT FBGEMM_CPU_ONLY)
   # CUTLASS currently doesn't build on ROCm and CK hasnt yet been added:
   #
   # 2024-05-06T23:09:35.5730483Z /__w/FBGEMM/FBGEMM/fbgemm_gpu/../external/cutlass/include/cutlass/half.h:73:10: fatal error: 'cuda_fp16.h' file not found
diff --git a/fbgemm_gpu/experimental/gen_ai/CMakeLists.txt b/fbgemm_gpu/experimental/gen_ai/CMakeLists.txt
index 01f1d6ab..19640d43 100644
--- a/fbgemm_gpu/experimental/gen_ai/CMakeLists.txt
+++ b/fbgemm_gpu/experimental/gen_ai/CMakeLists.txt
@@ -39,8 +39,6 @@ set(comm_ops_sources
     src/comm/car.cpp)
 
 set(experimental_gen_ai_cpp_source_files
-    ${attention_ops_sources}
-    ${quantize_ops_sources}
     ${comm_ops_sources})
 
 set_source_files_properties(${experimental_gen_ai_cpp_source_files}
diff --git a/fbgemm_gpu/experimental/gen_ai/src/comm/car.cu b/fbgemm_gpu/experimental/gen_ai/src/comm/car.cu
index d09a339a..b3913a1a 100644
--- a/fbgemm_gpu/experimental/gen_ai/src/comm/car.cu
+++ b/fbgemm_gpu/experimental/gen_ai/src/comm/car.cu
@@ -305,17 +305,7 @@ void car_init(
     } else {
       ptr = local_buffer.data_ptr();
     }
-#if (defined(USE_ROCM) && ROCM_VERSION < 60200)
-    /*
-     * This is to mitigate an issue for ROCm where the
-     * device for the data ptr from hipIpcOpenMemHandle
-     * is always 0, tracked in FBA-288
-     * This issue is fixed after RoCM 6.2.0
-     */
-    auto target_rank = (ii == rank ? rank : 0);
-#else
     auto target_rank = at::cuda::current_device();
-#endif
     state->buffers_[ii] = at::from_blob(
         ptr,
         {kMaxCAR},
@@ -325,11 +315,7 @@ void car_init(
   }
   for (auto ii = 0; ii < world_size; ++ii) {
     void* ptr = nullptr;
-#if (defined(USE_ROCM) && ROCM_VERSION < 60200)
-    auto target_rank = (ii == rank ? rank : 0);
-#else
     auto target_rank = at::cuda::current_device();
-#endif
     if (ii != rank) {
       AT_CUDA_CHECK(cudaIpcOpenMemHandle(
           &ptr,
