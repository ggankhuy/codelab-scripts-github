==PROF== Connected to process 2964 (/root/extdir/gg/git/codelab/gpu/cuda/cuda-by-example/p41/a.out)
==PROF== Profiling "add(int *, int *, int *)" - 0: 0%....50%....100% - 8 passes
==PROF== Disconnected from process 2964
0: 0 + 200 = 200
1000: 1000 + 1200 = 2200
2000: 2000 + 2200 = 4200
3000: 3000 + 3200 = 6200
4000: 4000 + 4200 = 8200
5000: 5000 + 5200 = 10200
6000: 6000 + 6200 = 12200
7000: 7000 + 7200 = 14200
8000: 8000 + 8200 = 16200
[2964] a.out@127.0.0.1
  add(int *, int *, int *) (8192, 1, 1)x(1024, 1, 1), Context 1, Stream 7, Device 0, CC 7.5
    Section: GPU Speed Of Light Throughput
    ----------------------- ------------- ------------
    Metric Name               Metric Unit Metric Value
    ----------------------- ------------- ------------
    DRAM Frequency          cycle/nsecond         6.82
    SM Frequency            cycle/nsecond         1.60
    Elapsed Cycles                  cycle       153631
    Memory Throughput                   %        25.67
    DRAM Throughput                     %         0.20
    Duration                      usecond        95.68
    L1/TEX Cache Throughput             %        35.66
    L2 Cache Throughput                 %         0.83
    SM Active Cycles                cycle    110260.95
    Compute (SM) Throughput             %        25.67
    ----------------------- ------------- ------------

    OPT   This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance 
          of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate    
          latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.                 

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                  1024
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                   8192
    Registers Per Thread             register/thread              16
    Shared Memory Configuration Size           Kbyte           32.77
    Driver Shared Memory Per Block        byte/block               0
    Dynamic Shared Memory Per Block       byte/block               0
    Static Shared Memory Per Block        byte/block               0
    Threads                                   thread         8388608
    Waves Per SM                                              204.80
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           16
    Block Limit Registers                 block            4
    Block Limit Shared Mem                block           16
    Block Limit Warps                     block            1
    Theoretical Active Warps per SM        warp           32
    Theoretical Occupancy                     %          100
    Achieved Occupancy                        %        87.12
    Achieved Active Warps Per SM           warp        27.88
    ------------------------------- ----------- ------------

    OPT   Estimated Speedup: 12.88%                                                                                     
          This kernel's theoretical occupancy is not impacted by any block limit. The difference between calculated     
          theoretical (100.0%) and measured achieved occupancy (87.1%) can be the result of warp scheduling overheads   
          or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block    
          as well as across blocks of the same kernel. See the CUDA Best Practices Guide                                
          (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on           
          optimizing occupancy.                                                                                         

