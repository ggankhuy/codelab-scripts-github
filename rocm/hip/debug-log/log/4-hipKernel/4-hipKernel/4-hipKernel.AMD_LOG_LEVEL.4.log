env_nocopy_str: 
:3:rocdevice.cpp            :418 : 231291337154 us: 142517: [tid:0x7f10f0407080] Initializing HSA stack.
GG: ROCr: GetEnvVar(HSA_ENABLED_SDMA): 
GG: ROCr: enable_sdma_: 2
GG: ROCr: GetEnvVar(HSA_ENABLED_SDMA): 
GG: ROCr: enable_sdma_: 2
GG: ROCr: GpuAgent.constructor, entered...
 GG: ROCr: !HSA_LARGE_MODEL enabled and defined(__linux__)
  GG: ROCr: max_queues_ : 128
GG: ROCr: GpuAgent.constructor, entered...
 GG: ROCr: !HSA_LARGE_MODEL enabled and defined(__linux__)
  GG: ROCr: max_queues_ : 128
GG: ROCr: GpuAgent.constructor, entered...
 GG: ROCr: !HSA_LARGE_MODEL enabled and defined(__linux__)
  GG: ROCr: max_queues_ : 128
GG: ROCr: GpuAgent.constructor, entered...
 GG: ROCr: !HSA_LARGE_MODEL enabled and defined(__linux__)
  GG: ROCr: max_queues_ : 128
GG: ROCr: GpuAgent::InitDma: entered...
  GG: ROCr: InitDma(): queues_[QueueBlitOnly].reset(queue_lambda): &queue_lambda/queue_lambda: 0x7ffcd9a7c6a8
  GG: ROCr: InitDma(): queues_[QueueUtility].reset(queue_lambda): &queue_lambda/queue_lambda: ;0x7ffcd9a7c6a8
  GG: ROCr: InitDma(): blit_cnt set to:9
  GG: ROCr: InitDma: blits_[BlitDevToDev].reset([this]() {};
  GG: ROCr: InitDma(): blits_[BlitHostToDev].reset([blit_lambda, this]() { return blist_lambda(false, queues_[QueueBlitOnly], true) ; } 
  GG: ROCr: InitDma(): blits_[BlitDevToHost].reset([blit_lambda, this]() { return blit_lambda(false, queues_[QueueUtility], false); } 
  GG: ROCr: InitDma(): setup xgmi engites...reset with blit_lambda(true, queues_[QueueUtility], false)
  GG: ROCr: InitDma(): xgmi No: 3, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 4, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 5, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 6, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 7, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 8, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): InitGWS...
GG: ROCr: GpuAgent::InitDma: entered...
  GG: ROCr: InitDma(): queues_[QueueBlitOnly].reset(queue_lambda): &queue_lambda/queue_lambda: 0x7ffcd9a7c6a8
  GG: ROCr: InitDma(): queues_[QueueUtility].reset(queue_lambda): &queue_lambda/queue_lambda: ;0x7ffcd9a7c6a8
  GG: ROCr: InitDma(): blit_cnt set to:9
  GG: ROCr: InitDma: blits_[BlitDevToDev].reset([this]() {};
  GG: ROCr: InitDma(): blits_[BlitHostToDev].reset([blit_lambda, this]() { return blist_lambda(false, queues_[QueueBlitOnly], true) ; } 
  GG: ROCr: InitDma(): blits_[BlitDevToHost].reset([blit_lambda, this]() { return blit_lambda(false, queues_[QueueUtility], false); } 
  GG: ROCr: InitDma(): setup xgmi engites...reset with blit_lambda(true, queues_[QueueUtility], false)
  GG: ROCr: InitDma(): xgmi No: 3, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 4, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 5, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 6, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 7, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 8, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): InitGWS...
GG: ROCr: GpuAgent::InitDma: entered...
  GG: ROCr: InitDma(): queues_[QueueBlitOnly].reset(queue_lambda): &queue_lambda/queue_lambda: 0x7ffcd9a7c6a8
  GG: ROCr: InitDma(): queues_[QueueUtility].reset(queue_lambda): &queue_lambda/queue_lambda: ;0x7ffcd9a7c6a8
  GG: ROCr: InitDma(): blit_cnt set to:9
  GG: ROCr: InitDma: blits_[BlitDevToDev].reset([this]() {};
  GG: ROCr: InitDma(): blits_[BlitHostToDev].reset([blit_lambda, this]() { return blist_lambda(false, queues_[QueueBlitOnly], true) ; } 
  GG: ROCr: InitDma(): blits_[BlitDevToHost].reset([blit_lambda, this]() { return blit_lambda(false, queues_[QueueUtility], false); } 
  GG: ROCr: InitDma(): setup xgmi engites...reset with blit_lambda(true, queues_[QueueUtility], false)
  GG: ROCr: InitDma(): xgmi No: 3, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 4, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 5, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 6, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 7, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 8, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): InitGWS...
GG: ROCr: GpuAgent::InitDma: entered...
  GG: ROCr: InitDma(): queues_[QueueBlitOnly].reset(queue_lambda): &queue_lambda/queue_lambda: 0x7ffcd9a7c6a8
  GG: ROCr: InitDma(): queues_[QueueUtility].reset(queue_lambda): &queue_lambda/queue_lambda: ;0x7ffcd9a7c6a8
  GG: ROCr: InitDma(): blit_cnt set to:9
  GG: ROCr: InitDma: blits_[BlitDevToDev].reset([this]() {};
  GG: ROCr: InitDma(): blits_[BlitHostToDev].reset([blit_lambda, this]() { return blist_lambda(false, queues_[QueueBlitOnly], true) ; } 
  GG: ROCr: InitDma(): blits_[BlitDevToHost].reset([blit_lambda, this]() { return blit_lambda(false, queues_[QueueUtility], false); } 
  GG: ROCr: InitDma(): setup xgmi engites...reset with blit_lambda(true, queues_[QueueUtility], false)
  GG: ROCr: InitDma(): xgmi No: 3, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 4, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 5, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 6, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 7, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 8, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): InitGWS...
:3:comgrctx.cpp             :33  : 231291425010 us: 142517: [tid:0x7f10f0407080] Loading COMGR library.
:3:rocdevice.cpp            :209 : 231291425074 us: 142517: [tid:0x7f10f0407080] Numa selects cpu agent[0]=0x170a2a0(fine=0x1721440,coarse=0x17fafb0) for gpu agent=0x17fe980
:3:rocdevice.cpp            :1613: 231291425376 us: 142517: [tid:0x7f10f0407080] HMM support: 1, xnack: 0, direct host access: 0

:4:rocdevice.cpp            :1920: 231291425815 us: 142517: [tid:0x7f10f0407080] Allocate hsa host memory 0x7f0fe4a00000, size 0x101000
:4:rocdevice.cpp            :1920: 231291426308 us: 142517: [tid:0x7f10f0407080] Allocate hsa host memory 0x7f0fe4800000, size 0x101000
:4:rocdevice.cpp            :2056: 231291426383 us: 142517: [tid:0x7f10f0407080] Allocate hsa device memory 0x7f0fe4400000, size 0x100000
:3:rocdevice.cpp            :209 : 231291426413 us: 142517: [tid:0x7f10f0407080] Numa selects cpu agent[0]=0x170a2a0(fine=0x1721440,coarse=0x17fafb0) for gpu agent=0x188e340
:3:rocdevice.cpp            :1613: 231291426532 us: 142517: [tid:0x7f10f0407080] HMM support: 1, xnack: 0, direct host access: 0

:4:rocdevice.cpp            :1920: 231291426938 us: 142517: [tid:0x7f10f0407080] Allocate hsa host memory 0x7f0fe4200000, size 0x101000
:4:rocdevice.cpp            :1920: 231291427379 us: 142517: [tid:0x7f10f0407080] Allocate hsa host memory 0x7f0cdf800000, size 0x101000
:4:rocdevice.cpp            :2056: 231291427475 us: 142517: [tid:0x7f10f0407080] Allocate hsa device memory 0x7f0cdf400000, size 0x100000
:3:rocdevice.cpp            :209 : 231291427501 us: 142517: [tid:0x7f10f0407080] Numa selects cpu agent[0]=0x170a2a0(fine=0x1721440,coarse=0x17fafb0) for gpu agent=0x18926d0
:3:rocdevice.cpp            :1613: 231291427615 us: 142517: [tid:0x7f10f0407080] HMM support: 1, xnack: 0, direct host access: 0

:4:rocdevice.cpp            :1920: 231291427943 us: 142517: [tid:0x7f10f0407080] Allocate hsa host memory 0x7f0cdf200000, size 0x101000
:4:rocdevice.cpp            :1920: 231291428330 us: 142517: [tid:0x7f10f0407080] Allocate hsa host memory 0x7f0cdf000000, size 0x101000
:4:rocdevice.cpp            :2056: 231291428441 us: 142517: [tid:0x7f10f0407080] Allocate hsa device memory 0x7f0cdec00000, size 0x100000
:3:rocdevice.cpp            :209 : 231291428470 us: 142517: [tid:0x7f10f0407080] Numa selects cpu agent[0]=0x170a2a0(fine=0x1721440,coarse=0x17fafb0) for gpu agent=0x1896a90
:3:rocdevice.cpp            :1613: 231291428583 us: 142517: [tid:0x7f10f0407080] HMM support: 1, xnack: 0, direct host access: 0

GG: ROCclr: SvmBuffer::malloc entered...
:4:rocdevice.cpp            :1920: 231291428618 us: 142517: [tid:0x7f10f0407080] Allocate hsa host memory 0x7f10f0266000, size 0xa0
:4:rocdevice.cpp            :1920: 231291428970 us: 142517: [tid:0x7f10f0407080] Allocate hsa host memory 0x7f0cdea00000, size 0x101000
:4:rocdevice.cpp            :1920: 231291429365 us: 142517: [tid:0x7f10f0407080] Allocate hsa host memory 0x7f0cde800000, size 0x101000
:4:rocdevice.cpp            :2056: 231291429480 us: 142517: [tid:0x7f10f0407080] Allocate hsa device memory 0x7f0cde400000, size 0x100000
:4:runtime.cpp              :83  : 231291429487 us: 142517: [tid:0x7f10f0407080] init
:3:hip_context.cpp          :50  : 231291429490 us: 142517: [tid:0x7f10f0407080] Direct Dispatch: 1
GG: hipamd: ihipMalloc entered...
GG: ROCclr: SvmBuffer::malloc entered...
:4:rocdevice.cpp            :2056: 231291429551 us: 142517: [tid:0x7f10f0407080] Allocate hsa device memory 0x7f0cdde00000, size 0x400000
:3:rocdevice.cpp            :2095: 231291429556 us: 142517: [tid:0x7f10f0407080] device=0x189da30, freeMem_ = 0xfec00000
:3:hip_memory.cpp           :503 : 231291429562 us: 142517: [tid:0x7f10f0407080] hipMalloc: Returned hipSuccess : 0x7f0cdde00000
:3:hip_memory.cpp           :563 : 231291430853 us: 142517: [tid:0x7f10f0407080] [32mhipMemcpy ( 0x7f0cdde00000, 0x7f10e54b6010, 4194304, hipMemcpyHostToDevice )[0m
hipMemcpy.start.
GG: ROCclr: VirtualGPU::VirtualGPU (constructor) entered...
GG: ROCclr: VirtualGPU::VirtualGPU: device: 0x189da30
GG: ROCclr: VirtualGPU::Create() entered...
  GG: ROCclr: VirtualGPU::Create(): requesting queue, size: 4096
GG: ROCclr: acquireQueue entered...
:3:rocdevice.cpp            :2692: 231291430872 us: 142517: [tid:0x7f10f0407080] number of allocated hardware queues with low priority: 0, with normal priority: 0, with high priority: 0, maximum per priority is: 4
  GG: ROCclr: queue_size: 4096, queue_max_packets/queue_size_hint: 131072/4096
GG: ROCr:  hsa_queue_create entered...
  GG: ROCr:  agent handle: ?? ,size: 4096, type: 0, source: ?? 
GG: ROCr: GpuAgent::QueueCreate entered...
  GG:QueueCreate(): size: 4096, type: 0
GG: ROCr: GpuAgent::QueueCreate queues_[QueueUtility].touch()...
GG: ROCr: ROCr: InitDma(): LAMBDA: queue_lambda(): entered: 
GG: ROCr: GpuAgent::CreateInterceptibleQueue entered...
GG: ROCr: GpuAgent::QueueCreate entered...
  GG:QueueCreate(): size: 64, type: 0
GG: ROCr: GpuAgent::QueueCreate queues_[QueueUtility].touch()...
  GG: ROCr: GpuAgent::QueueCreate:  newly created AqlQueue, addr/size: 0x18ab2e0/64
  GG: ROCr: GpuAgent::QueueCreate:  update * queue (from AqlQueue), addr/base_address/size: 0x18ab2e0/0x7f10f0262000/64
  GG: ROCr: GpuAgent::QueueCreate:  newly created AqlQueue, addr/size: 0x18abe50/4096
  GG: ROCr: GpuAgent::QueueCreate:  update * queue (from AqlQueue), addr/base_address/size: 0x18abe50/0x7f10e4c40000/4096
  GG: ROCclr: acquireQueue: created queue (ptr): 0x7f10f0256000, size: 4096
:3:rocdevice.cpp            :2773: 231291454784 us: 142517: [tid:0x7f10f0407080] created hardware queue 0x7f10f0256000 with size 4096 with priority 1, cooperative: 0
  GG: ROCclr: VirtualGpu::Create(): create gpu_queue: 0x7f10f0256000
:4:rocdevice.cpp            :1920: 231291454975 us: 142517: [tid:0x7f10f0407080] Allocate hsa host memory 0x7f0fe4700000, size 0x80000
GG: ROCclr: BlitProgram::create() entered...
  GG: ROCclr: BlitProgram::create(): kernels: extern void __amd_fillBufferAligned(__global uchar*, __global ushort*, __global uint*, __global ulong*, __constant uchar*, uint, ulong, ulong); extern void __amd_fillBufferAligned2D(__global uchar*, __global ushort*, __global uint*, __global ulong*, __constant uchar*, uint, ulong, ulong, ulong, ulong); extern void __amd_copyBuffer(__global uchar*, __global uchar*, ulong, ulong, ulong, uint); extern void __amd_copyBufferAligned(__global uint*, __global uint*, ulong, ulong, ulong, uint); extern void __amd_copyBufferRect(__global uchar*, __global uchar*, ulong4, ulong4, ulong4); extern void __amd_copyBufferRectAligned(__global uint*, __global uint*, ulong4, ulong4, ulong4); __kernel void __amd_rocclr_fillBufferAligned(__global uchar* bufUChar, __global ushort* bufUShort, __global uint* bufUInt, __global ulong* bufULong, __constant uchar* pattern, uint patternSize, ulong offset, ulong size) { __amd_fillBufferAligned(bufUChar, bufUShort, bufUInt, bufULong, pattern, patternSize, offset, size); } __kernel void __amd_rocclr_fillBufferAligned2D(__global uchar* bufUChar, __global ushort* bufUShort, __global uint* bufUInt, __global ulong* bufULong, __constant uchar* pattern, uint patternSize, ulong offset, ulong width, ulong height, ulong pitch) { __amd_fillBufferAligned2D(bufUChar, bufUShort, bufUInt, bufULong, pattern, patternSize, offset, width, height, pitch); } __kernel void __amd_rocclr_copyBuffer(__global uchar* srcI, __global uchar* dstI, ulong srcOrigin, ulong dstOrigin, ulong size, uint remain) { __amd_copyBuffer(srcI, dstI, srcOrigin, dstOrigin, size, remain); } __kernel void __amd_rocclr_copyBufferAligned(__global uint* src, __global uint* dst, ulong srcOrigin, ulong dstOrigin, ulong size, uint alignment) { __amd_copyBufferAligned(src, dst, srcOrigin, dstOrigin, size, alignment); } __kernel void __amd_rocclr_copyBufferRect(__global uchar* src, __global uchar* dst, ulong4 srcRect, ulong4 dstRect, ulong4 size) { __amd_copyBufferRect(src, dst, srcRect, dstRect, size); } __kernel void __amd_rocclr_copyBufferRectAligned(__global uint* src, __global uint* dst, ulong4 srcRect, ulong4 dstRect, ulong4 size) { __amd_copyBufferRectAligned(src, dst, srcRect, dstRect, size); }extern void __amd_streamOpsWrite(__global uint*, __global ulong*, ulong, ulong); extern void __amd_streamOpsWait(__global uint*,__global ulong*, ulong, ulong, ulong); __kernel void __amd_rocclr_streamOpsWrite(__global uint* ptrInt, __global ulong* ptrUlong, ulong value, ulong sizeBytes) { __amd_streamOpsWrite(ptrInt, ptrUlong, value, sizeBytes); } __kernel void __amd_rocclr_streamOpsWait(__global uint* ptrInt, __global ulong* ptrUlong, ulong value, ulong flags, ulong mask) { __amd_streamOpsWait(ptrInt, ptrUlong, value, flags, mask); }extern void __ockl_gws_init(uint nwm1, uint rid); __kernel void __amd_rocclr_gwsInit(uint value) { __ockl_gws_init(value, 0); }
GG: ROCclr: program(runtimeObject): constructor entered: 
:3:devprogram.cpp           :2705: 231291601729 us: 142517: [tid:0x7f10f0407080] Using Code Object V4.
GG: ROCclr: -------------------------------
GG: ROCclr: Program(public RuntimeObject)::load() entered...
  GG: ROCclr: Program::(RuntimeObject): Kernel Name: 
GG: ROCclr: bool Program(public HeapObject)::load() entered...
  GG: ROCclr: bool Program(public HeapObject)::load(): Kernel Name: __amd_rocclr_copyBufferAligned, __amd_rocclr_fillBufferAligned2D, 
GG: ROCclr: bool Program(public HeapObject)::loadLC() entered...
GG: ROCclr: setKernels entered...
GG: ROCr:  hsa_executable_freeze() entered...
GG: ROCr: AmdHsaCodeLoader::FreezeExecutable() entered...
GG: ROCr: ExecutableImpl::Freeze() entered...
GG: ROCr: LoaderContext::SegmentFreeze() entered...
GG: ROCr: RegionMemory::Freeze() entered...
GG: ROCr: GpuAgent::DmaCopy(dst, src, size)..entered.
GG: ROCr: GpuAgent::Dmacopy(): return blits_[BlitDevtoDev]->SubmitLinearCopyCommand(dst,src,size)...
    GG: ROCr:: lazy_ptr::print_state: obj.get():  0, target avail?: 1
GG: ROCr: GpuAgent::DmaCopy(): BlitDevToDev: 0, isSMDA?:   GG: ROCr: ROCr: InitDma(): LAMBDA: blits_[BlitDevToDev].reset(<unnamed_lambda>[this]() entered...
GG: ROCr: GpuAgent::CreateBlitKernel() entered...
0
GG: ROCr: BlitKernel::SubmitLinearCopyCommand(dst, src, size): entered.
GG: ROCr: BlitKernel::SubmitLinearCopyCommand(dst, src, size, dep_signals, out_signal): entered.
  GG: ROCr: dst, src: 0x7f10e4cac000, 0x7f10e4ca4000size: 20592
  GG: ROCr: num_barrier_packet: 0
  GG: ROCr: total_num_packet: 1
GG: ROCr: print_save_buffer: buffer , size: 4096
  GG: ROCr: num_workitems(aligned): 30720, num_cus_:120 kernel_code: 0x1925d18
  GG: ROCr: src_start/dst_start/phase1_size: 7f10e4ca4000/7f10e4cac000/0
  GG: ROCr: phase2_block/phase2_size: 78000/0
  GG: ROCr: phase3_size: 5070
GG: ROCr: BlitKernel::PopulateQueue: entered (2)
  GG: ROCr: index, code_handle, args, grid_size_x, completion_signal: 0, 7f10f021a000, 0x7f10f021c000, 7800, ??? 
  GG: ROCr: (pkt) ---------------------.
  GG: ROCr: (pkt) packet: 0x7f10f0262000, queue_buffer: 0x7f10f0262000, index: 0, queue_bitmask_:3f
  GG: ROCr: (pkt) dumpAqlPacket (dispatch) entered.
  GG: ROCr: (pkt) HSA_PACKET_HEADER_TYPE:                             HSA_PACKET_TYPE_KERNEL_DISPATCH
  GG: ROCr: (pkt) HSA_PACKET_HEADER_BARRIER (1-bit):                  0
  GG: ROCr: (pkt) HSA_PACKET_HEADER_(SC)ACQUIRE_FENCE_SCOPE (2-bit):  400
  GG: ROCr: (pkt) HSA_PACKET_HEADER_(SC)ACQUIRE_FENCE_SCOPE (2-bit):  1400
  GG: ROCr: (pkt) workgroup size (x,y,z):                                   40, 1, 1
  GG: ROCr: (pkt) grid size (x,y,z):                                        7800, 1, 1
  GG: ROCr: (pkt) kernel_object:                                            7f10f021a000
  GG: ROCr: (pkt) kernelarg_address:                                        0x7f10f021c000
  GG: ROCr: (pkt) completion signal:                                        7f10f028a580
GG: ROCr: GpuAgent::InvalidateCodeCaches()
GG: ROCr: AqlQueue::ExecutePM() entered...
GG: ROCclr: Program(public HeapObject)::runInitKernel() entered...
GG: ROCclr: Program(public HeapObject)::runInitFiniKernel()(2) entered...
:3:devprogram.cpp           :3011: 231291603016 us: 142517: [tid:0x7f10f0407080] For Init/Fini: Kernel Name: __amd_rocclr_copyBufferAligned
:3:devprogram.cpp           :3011: 231291603019 us: 142517: [tid:0x7f10f0407080] For Init/Fini: Kernel Name: __amd_rocclr_streamOpsWait
:3:devprogram.cpp           :3011: 231291603021 us: 142517: [tid:0x7f10f0407080] For Init/Fini: Kernel Name: __amd_rocclr_copyBuffer
:3:devprogram.cpp           :3011: 231291603023 us: 142517: [tid:0x7f10f0407080] For Init/Fini: Kernel Name: __amd_rocclr_streamOpsWrite
:3:devprogram.cpp           :3011: 231291603024 us: 142517: [tid:0x7f10f0407080] For Init/Fini: Kernel Name: __amd_rocclr_copyBufferRectAligned
:3:devprogram.cpp           :3011: 231291603026 us: 142517: [tid:0x7f10f0407080] For Init/Fini: Kernel Name: __amd_rocclr_gwsInit
:3:devprogram.cpp           :3011: 231291603027 us: 142517: [tid:0x7f10f0407080] For Init/Fini: Kernel Name: __amd_rocclr_copyBufferRect
:3:devprogram.cpp           :3011: 231291603029 us: 142517: [tid:0x7f10f0407080] For Init/Fini: Kernel Name: __amd_rocclr_fillBufferAligned
:3:devprogram.cpp           :3011: 231291603031 us: 142517: [tid:0x7f10f0407080] For Init/Fini: Kernel Name: __amd_rocclr_fillBufferAligned2D
:4:rocmemory.cpp            :941 : 231291603093 us: 142517: [tid:0x7f10f0407080] Locking to pool 0x17fafb0, size 0x1000, HostPtr = 0x1d5f000, DevPtr = 0x7f10e4ca0000
GG: ROCclr: VirtualGPU::HwQueueTracker::Create() entered...
GG: hipamd: ihipMemCpyCommand entered...
GG: ROCclr: command::enqueue() entered... command: 0x19ac220, HostQueue * queue_: 0x18aad60
:4:command.cpp              :343 : 231291603185 us: 142517: [tid:0x7f10f0407080] command is enqueued: 0x19ac220
:4:rocmemory.cpp            :941 : 231291603332 us: 142517: [tid:0x7f10f0407080] Locking to pool 0x17fafb0, size 0x401000, HostPtr = 0x7f10e54b6000, DevPtr = 0x7f0cd4800000
GG: ROCclr: KernelBlitManager::copyBuffer entered...
:4:rocblit.cpp              :673 : 231291603343 us: 142517: [tid:0x7f10f0407080] HSA Asycn Copy wait_event=0x0, completion_signal=0x7f10f028a480
GG; hsa_amd_memory_async_copy: entered...
GG: ROCr: Runtime::CopyMemory.(2)
GG: ROCr: GpuAgent::DmaCopy(dst, dst_agent, src, src_agent, size, dep_signals, out_signal)..entered.
GG: ROCr: GpuAgent::GetPcieBlit entered...
  GG: ROCr: GpuAgent::GetPcieBlit: blits_[BlitHostDev] or blits_[BlitDevToHost]
GG: ROCr: ROCr: InitDma(): LAMBDA: blit_lambda(): entered: use_xgmi: 0, isHostToDev: 1
  GG: ROCr: ROCr: blit_lambda(): use_sdma after checking gfx8/1013: 1
  GG: ROCr: ROCr: blit_lambda(): use_sdma after checking sdma_override: 1
  GG: ROCr: ROCr: blit_lambda(): gfx90a specific: 
GG: ROCr: GpuAgent::CreateBlitSdma entered... use_xgmi: 0
GG: ROCr:  BlistSdma::Initialize() entered...
  GG: ROCr:  copy command No: 0...
GG: ROCr:  ------------------------------------
GG: ROCr:  dump_sdma_pkt_copy_linear entered...
  GG: ROCr:  (pkt) SDMA_PKT_COPY_LINEAR_TAG.HEADER_UNION.op: SDMA_OP_COPY
  GG: ROCr:  (pkt) SDMA_PKT_COPY_LINEAR_TAG.HEADER_UNION.sub_op: SDMA_SUBOP_COPY_LINEAR
  GG: ROCr:  (pkt) SDMA_PKT_COPY_LINEAR_TAG.SRC_ADDR_LO_UNION.src_addr_31_0: d4800010
  GG: ROCr:  (pkt) SDMA_PKT_COPY_LINEAR_TAG.SRC_ADDR_HI_UNION.src_addr_63_32: 7f0c
  GG: ROCr:  (pkt) SDMA_PKT_COPY_LINEAR_TAG.DST_ADDR_LO_UNION.dst_addr_31_0: dde00000
  GG: ROCr:  (pkt) SDMA_PKT_COPY_LINEAR_TAG.DST_ADDR_HI_UNION.dst_addr_63_32: 7f0c
  GG: ROCr:  copy command No: 1...
GG: ROCr:  ------------------------------------
GG: ROCr:  dump_sdma_pkt_copy_linear entered...
  GG: ROCr:  (pkt) SDMA_PKT_COPY_LINEAR_TAG.HEADER_UNION.op: SDMA_OP_COPY
  GG: ROCr:  (pkt) SDMA_PKT_COPY_LINEAR_TAG.HEADER_UNION.sub_op: SDMA_SUBOP_COPY_LINEAR
  GG: ROCr:  (pkt) SDMA_PKT_COPY_LINEAR_TAG.SRC_ADDR_LO_UNION.src_addr_31_0: d4bffff0
  GG: ROCr:  (pkt) SDMA_PKT_COPY_LINEAR_TAG.SRC_ADDR_HI_UNION.src_addr_63_32: 7f0c
  GG: ROCr:  (pkt) SDMA_PKT_COPY_LINEAR_TAG.DST_ADDR_LO_UNION.dst_addr_31_0: de1fffe0
  GG: ROCr:  (pkt) SDMA_PKT_COPY_LINEAR_TAG.DST_ADDR_HI_UNION.dst_addr_63_32: 7f0c
GG: ROCr:  ------------------------------------
GG: ROCr:  dump_sdma_pkt_fence entered...
  GG: ROCr:  (pkt) SDMA_PKT_FENCE.HEADER_UNION.op: SDMA_OP_FENCE
  GG: ROCr:  (pkt) SDMA_PKT_FENCE.HEADER_UNION.sub_op: SDMA_SUBOP_COPY_LINEAR
  GG: ROCr:  (pkt) SDMA_PKT_FENCE.ADDR_LO_UNION.addr_31_0: f0280048
  GG: ROCr:  (pkt) SDMA_PKT_FENCE.ADDR_HI_UNION.addr_63_32: 7f10
:4:rocvirtual.cpp           :528 : 231291603907 us: 142517: [tid:0x7f10f0407080] Host wait on completion_signal=0x7f10f028a480
:3:rocvirtual.hpp           :62  : 231291603911 us: 142517: [tid:0x7f10f0407080] Host active wait for Signal = (0x7f10f028a480) for -1 ns
:4:command.cpp              :281 : 231291604589 us: 142517: [tid:0x7f10f0407080] queue marker to command queue: 0x18aad60
GG: ROCclr: command::enqueue() entered... command: 0x18e6d10, HostQueue * queue_: 0x18aad60
:4:command.cpp              :343 : 231291604594 us: 142517: [tid:0x7f10f0407080] command is enqueued: 0x18e6d10
:4:command.cpp              :171 : 231291604597 us: 142517: [tid:0x7f10f0407080] Command 0x19ac220 complete
:4:command.cpp              :169 : 231291604599 us: 142517: [tid:0x7f10f0407080] Command 0x18e6d10 complete (Wall: 231291604598, CPU: 0, GPU: 0 us)
:4:command.cpp              :246 : 231291604601 us: 142517: [tid:0x7f10f0407080] waiting for event 0x19ac220 to complete, current status 0
:4:command.cpp              :260 : 231291604603 us: 142517: [tid:0x7f10f0407080] event 0x19ac220 wait completed
:3:hip_memory.cpp           :564 : 231291604607 us: 142517: [tid:0x7f10f0407080] hipMemcpy: Returned hipSuccess : : duration: 173754 us
:3:hip_platform.cpp         :209 : 231291604618 us: 142517: [tid:0x7f10f0407080] [32m__hipPushCallConfiguration ( {1,1,1}, {256,1,1}, 0, stream:<null> )[0m
:3:hip_platform.cpp         :213 : 231291604624 us: 142517: [tid:0x7f10f0407080] __hipPushCallConfiguration: Returned hipSuccess : 
:3:hip_platform.cpp         :220 : 231291604631 us: 142517: [tid:0x7f10f0407080] [32m__hipPopCallConfiguration ( {25114192,0,25107136}, {4003172045,32528,25114192}, 0x7ffcd9a7cce8, 0x7ffcd9a7cce0 )[0m
:3:hip_platform.cpp         :229 : 231291604634 us: 142517: [tid:0x7f10f0407080] __hipPopCallConfiguration: Returned hipSuccess : 
:3:hip_module.cpp           :508 : 231291604650 us: 142517: [tid:0x7f10f0407080] [32mhipLaunchKernel ( 0x401ef8, {1,1,1}, {256,1,1}, 0x7ffcd9a7ccf0, 0, stream:<null> )[0m
:3:devprogram.cpp           :2705: 231291604992 us: 142517: [tid:0x7f10f0407080] Using Code Object V4.
hipMemcpy.end
GG: ROCclr: -------------------------------
GG: ROCclr: Program(public RuntimeObject)::load() entered...
  GG: ROCclr: Program::(RuntimeObject): Kernel Name: 
GG: ROCclr: bool Program(public HeapObject)::load() entered...
  GG: ROCclr: bool Program(public HeapObject)::load(): Kernel Name: _Z2k1v, 
GG: ROCclr: bool Program(public HeapObject)::loadLC() entered...
GG: ROCclr: setKernels entered...
GG: ROCr:  hsa_executable_freeze() entered...
GG: ROCr: AmdHsaCodeLoader::FreezeExecutable() entered...
GG: ROCr: ExecutableImpl::Freeze() entered...
GG: ROCr: LoaderContext::SegmentFreeze() entered...
GG: ROCr: RegionMemory::Freeze() entered...
GG: ROCr: GpuAgent::DmaCopy(dst, src, size)..entered.
GG: ROCr: GpuAgent::Dmacopy(): return blits_[BlitDevtoDev]->SubmitLinearCopyCommand(dst,src,size)...
    GG: ROCr:: lazy_ptr::print_state: obj.get():  0x1f2a820, target avail?: 0
GG: ROCr: GpuAgent::DmaCopy(): BlitDevToDev: 0, isSMDA?: 0
GG: ROCr: BlitKernel::SubmitLinearCopyCommand(dst, src, size): entered.
GG: ROCr: BlitKernel::SubmitLinearCopyCommand(dst, src, size, dep_signals, out_signal): entered.
  GG: ROCr: dst, src: 0x7f10e4c96000, 0x7f10e4c92000size: 2070
  GG: ROCr: num_barrier_packet: 0
  GG: ROCr: total_num_packet: 1
GG: ROCr: print_save_buffer: buffer , size: 1000
  GG: ROCr: num_workitems(aligned): 7800, num_cus_:78 kernel_code: 0x1925d18
  GG: ROCr: src_start/dst_start/phase1_size: 7f10e4c92000/7f10e4c96000/0
  GG: ROCr: phase2_block/phase2_size: 78000/0
  GG: ROCr: phase3_size: 2070
GG: ROCr: BlitKernel::PopulateQueue: entered (2)
  GG: ROCr: index, code_handle, args, grid_size_x, completion_signal: 2, 7f10f021a000, 0x7f10f021c060, 7800, ??? 
  GG: ROCr: (pkt) ---------------------.
  GG: ROCr: (pkt) packet: 0x7f10f0262080, queue_buffer: 0x7f10f0262000, index: 2, queue_bitmask_:3f
  GG: ROCr: (pkt) dumpAqlPacket (dispatch) entered.
  GG: ROCr: (pkt) HSA_PACKET_HEADER_TYPE:                             HSA_PACKET_TYPE_KERNEL_DISPATCH
  GG: ROCr: (pkt) HSA_PACKET_HEADER_BARRIER (1-bit):                  0
  GG: ROCr: (pkt) HSA_PACKET_HEADER_(SC)ACQUIRE_FENCE_SCOPE (2-bit):  400
  GG: ROCr: (pkt) HSA_PACKET_HEADER_(SC)ACQUIRE_FENCE_SCOPE (2-bit):  1400
  GG: ROCr: (pkt) workgroup size (x,y,z):                                   40, 1, 1
  GG: ROCr: (pkt) grid size (x,y,z):                                        7800, 1, 1
  GG: ROCr: (pkt) kernel_object:                                            7f10f021a000
  GG: ROCr: (pkt) kernelarg_address:                                        0x7f10f021c060
  GG: ROCr: (pkt) completion signal:                                        7f10f028a580
GG: ROCr: GpuAgent::InvalidateCodeCaches()
GG: ROCr: AqlQueue::ExecutePM() entered...
GG: ROCclr: Program(public HeapObject)::runInitKernel() entered...
GG: ROCclr: Program(public HeapObject)::runInitFiniKernel()(2) entered...
:3:devprogram.cpp           :3011: 231291605302 us: 142517: [tid:0x7f10f0407080] For Init/Fini: Kernel Name: _Z2k1v
:3:hip_module.cpp           :361 : 231291605316 us: 142517: [tid:0x7f10f0407080] [32mihipModuleLaunchKernel ( 0x0x1930420, 256, 1, 1, 256, 1, 1, 0, stream:<null>, 0x7ffcd9a7ccf0, char array:<null>, event:0, event:0, 0, 0 )[0m
GG: hipamd: hipamd: ihipModuleLaunchKernel entered...
GG: ROCclr: command::enqueue() entered... command: 0x1cf5a10, HostQueue * queue_: 0x18aad60
:4:command.cpp              :343 : 231291605325 us: 142517: [tid:0x7f10f0407080] command is enqueued: 0x1cf5a10
GG: ROCclr: NDRangeKernelCommand::submit() entered...
GG: ROCclr: VirtualGPU::submitKernel entered...
GG: ROCclr: VirtualGPU::submitKernelInternal entered...
  GG: ROCclr: ShaderName: (2): _Z2k1v
:3:rocvirtual.cpp           :2749: 231291605332 us: 142517: [tid:0x7f10f0407080] ShaderName : _Z2k1v
:4:rocvirtual.cpp           :854 : 231291605343 us: 142517: [tid:0x7f10f0407080] HWq=0x7f10f0256000, Dispatch Header = 0xd02 (type=2, barrier=1, acquire=2, release=1), setup=3, grid=[256, 1, 1], workgroup=[256, 1, 1], private_seg_size=0, group_seg_size=0, kernel_obj=0x7f10e4c96440, kernarg_address=0x7f0fe4700000, completion_signal=0x0
:3:hip_platform.cpp         :676 : 231291605349 us: 142517: [tid:0x7f10f0407080] ihipLaunchKernel: Returned hipSuccess : 
:3:hip_module.cpp           :509 : 231291605351 us: 142517: [tid:0x7f10f0407080] hipLaunchKernel: Returned hipSuccess : 
It took me 0.174516 seconds.
:3:hip_memory.cpp           :544 : 231291605376 us: 142517: [tid:0x7f10f0407080] [32mhipFree ( 0x7f0cdde00000 )[0m
:3:rocdevice.cpp            :2638: 231291605381 us: 142517: [tid:0x7f10f0407080] No HW event
:4:commandqueue.cpp         :128 : 231291605383 us: 142517: [tid:0x7f10f0407080] HW Event not ready, awaiting completion instead
:4:command.cpp              :281 : 231291605385 us: 142517: [tid:0x7f10f0407080] queue marker to command queue: 0x18aad60
GG: ROCclr: command::enqueue() entered... command: 0x18e6d10, HostQueue * queue_: 0x18aad60
:4:command.cpp              :343 : 231291605388 us: 142517: [tid:0x7f10f0407080] command is enqueued: 0x18e6d10
:4:rocvirtual.cpp           :988 : 231291605391 us: 142517: [tid:0x7f10f0407080] HWq=0x7f10f0256000, BarrierAND Header = 0x1503 (type=3, barrier=1, acquire=2, release=2), dep_signal=[0x0, 0x0, 0x0, 0x0, 0x0], completion_signal=0x7f10f028a400
:4:rocvirtual.cpp           :528 : 231291605393 us: 142517: [tid:0x7f10f0407080] Host wait on completion_signal=0x7f10f028a400
:3:rocvirtual.hpp           :62  : 231291605395 us: 142517: [tid:0x7f10f0407080] Host active wait for Signal = (0x7f10f028a400) for -1 ns
:4:command.cpp              :171 : 231291671994 us: 142517: [tid:0x7f10f0407080] Command 0x1cf5a10 complete
:4:command.cpp              :169 : 231291672002 us: 142517: [tid:0x7f10f0407080] Command 0x18e6d10 complete (Wall: 231291672001, CPU: 0, GPU: 0 us)
:4:command.cpp              :246 : 231291672004 us: 142517: [tid:0x7f10f0407080] waiting for event 0x1cf5a10 to complete, current status 0
:4:command.cpp              :260 : 231291672006 us: 142517: [tid:0x7f10f0407080] event 0x1cf5a10 wait completed
:4:commandqueue.cpp         :140 : 231291672009 us: 142517: [tid:0x7f10f0407080] All commands finished
:4:rocdevice.cpp            :2072: 231291672084 us: 142517: [tid:0x7f10f0407080] Free hsa memory 0x7f0cdde00000
:3:rocdevice.cpp            :2095: 231291672088 us: 142517: [tid:0x7f10f0407080] device=0x189da30, freeMem_ = 0xff000000
:3:hip_memory.cpp           :546 : 231291672091 us: 142517: [tid:0x7f10f0407080] hipFree: Returned hipSuccess : 
GG: ROCclr: Program(public RuntimeObject)::unload() entered...
  GG: ROCclr: Program::(RuntimeObject): Kernel Name: 
GG: ROCclr: Program(public HeapObject)::runFiniKernel() entered...
GG: ROCclr: Program(public HeapObject)::runInitFiniKernel()(2) entered...
:3:devprogram.cpp           :3011: 231291672305 us: 142517: [tid:0x7f10f0407080] For Init/Fini: Kernel Name: _Z2k1v
GG: ROCclr: Program(public RuntimeObject)::unload() entered...
  GG: ROCclr: Program::(RuntimeObject): Kernel Name: 
GG: ROCclr: Program(public RuntimeObject)::unload() entered...
  GG: ROCclr: Program::(RuntimeObject): Kernel Name: 
GG: ROCclr: Program(public RuntimeObject)::unload() entered...
  GG: ROCclr: Program::(RuntimeObject): Kernel Name: 
