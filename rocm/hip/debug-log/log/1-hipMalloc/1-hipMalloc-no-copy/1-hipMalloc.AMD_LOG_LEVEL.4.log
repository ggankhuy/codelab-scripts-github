:3:rocdevice.cpp            :418 : 231271477727 us: 141340: [tid:0x7ff31bb32080] Initializing HSA stack.
GG: ROCr: GetEnvVar(HSA_ENABLED_SDMA): 
GG: ROCr: enable_sdma_: 2
GG: ROCr: GetEnvVar(HSA_ENABLED_SDMA): 
GG: ROCr: enable_sdma_: 2
GG: ROCr: GpuAgent.constructor, entered...
 GG: ROCr: !HSA_LARGE_MODEL enabled and defined(__linux__)
  GG: ROCr: max_queues_ : 128
GG: ROCr: GpuAgent.constructor, entered...
 GG: ROCr: !HSA_LARGE_MODEL enabled and defined(__linux__)
  GG: ROCr: max_queues_ : 128
GG: ROCr: GpuAgent.constructor, entered...
 GG: ROCr: !HSA_LARGE_MODEL enabled and defined(__linux__)
  GG: ROCr: max_queues_ : 128
GG: ROCr: GpuAgent.constructor, entered...
 GG: ROCr: !HSA_LARGE_MODEL enabled and defined(__linux__)
  GG: ROCr: max_queues_ : 128
GG: ROCr: GpuAgent::InitDma: entered...
  GG: ROCr: InitDma(): queues_[QueueBlitOnly].reset(queue_lambda): &queue_lambda/queue_lambda: 0x7ffe59d741b8
  GG: ROCr: InitDma(): queues_[QueueUtility].reset(queue_lambda): &queue_lambda/queue_lambda: ;0x7ffe59d741b8
  GG: ROCr: InitDma(): blit_cnt set to:9
  GG: ROCr: InitDma: blits_[BlitDevToDev].reset([this]() {};
  GG: ROCr: InitDma(): blits_[BlitHostToDev].reset([blit_lambda, this]() { return blist_lambda(false, queues_[QueueBlitOnly], true) ; } 
  GG: ROCr: InitDma(): blits_[BlitDevToHost].reset([blit_lambda, this]() { return blit_lambda(false, queues_[QueueUtility], false); } 
  GG: ROCr: InitDma(): setup xgmi engites...reset with blit_lambda(true, queues_[QueueUtility], false)
  GG: ROCr: InitDma(): xgmi No: 3, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 4, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 5, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 6, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 7, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 8, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): InitGWS...
GG: ROCr: GpuAgent::InitDma: entered...
  GG: ROCr: InitDma(): queues_[QueueBlitOnly].reset(queue_lambda): &queue_lambda/queue_lambda: 0x7ffe59d741b8
  GG: ROCr: InitDma(): queues_[QueueUtility].reset(queue_lambda): &queue_lambda/queue_lambda: ;0x7ffe59d741b8
  GG: ROCr: InitDma(): blit_cnt set to:9
  GG: ROCr: InitDma: blits_[BlitDevToDev].reset([this]() {};
  GG: ROCr: InitDma(): blits_[BlitHostToDev].reset([blit_lambda, this]() { return blist_lambda(false, queues_[QueueBlitOnly], true) ; } 
  GG: ROCr: InitDma(): blits_[BlitDevToHost].reset([blit_lambda, this]() { return blit_lambda(false, queues_[QueueUtility], false); } 
  GG: ROCr: InitDma(): setup xgmi engites...reset with blit_lambda(true, queues_[QueueUtility], false)
  GG: ROCr: InitDma(): xgmi No: 3, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 4, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 5, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 6, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 7, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 8, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): InitGWS...
GG: ROCr: GpuAgent::InitDma: entered...
  GG: ROCr: InitDma(): queues_[QueueBlitOnly].reset(queue_lambda): &queue_lambda/queue_lambda: 0x7ffe59d741b8
  GG: ROCr: InitDma(): queues_[QueueUtility].reset(queue_lambda): &queue_lambda/queue_lambda: ;0x7ffe59d741b8
  GG: ROCr: InitDma(): blit_cnt set to:9
  GG: ROCr: InitDma: blits_[BlitDevToDev].reset([this]() {};
  GG: ROCr: InitDma(): blits_[BlitHostToDev].reset([blit_lambda, this]() { return blist_lambda(false, queues_[QueueBlitOnly], true) ; } 
  GG: ROCr: InitDma(): blits_[BlitDevToHost].reset([blit_lambda, this]() { return blit_lambda(false, queues_[QueueUtility], false); } 
  GG: ROCr: InitDma(): setup xgmi engites...reset with blit_lambda(true, queues_[QueueUtility], false)
  GG: ROCr: InitDma(): xgmi No: 3, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 4, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 5, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 6, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 7, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 8, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): InitGWS...
GG: ROCr: GpuAgent::InitDma: entered...
  GG: ROCr: InitDma(): queues_[QueueBlitOnly].reset(queue_lambda): &queue_lambda/queue_lambda: 0x7ffe59d741b8
  GG: ROCr: InitDma(): queues_[QueueUtility].reset(queue_lambda): &queue_lambda/queue_lambda: ;0x7ffe59d741b8
  GG: ROCr: InitDma(): blit_cnt set to:9
  GG: ROCr: InitDma: blits_[BlitDevToDev].reset([this]() {};
  GG: ROCr: InitDma(): blits_[BlitHostToDev].reset([blit_lambda, this]() { return blist_lambda(false, queues_[QueueBlitOnly], true) ; } 
  GG: ROCr: InitDma(): blits_[BlitDevToHost].reset([blit_lambda, this]() { return blit_lambda(false, queues_[QueueUtility], false); } 
  GG: ROCr: InitDma(): setup xgmi engites...reset with blit_lambda(true, queues_[QueueUtility], false)
  GG: ROCr: InitDma(): xgmi No: 3, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 4, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 5, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 6, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 7, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): xgmi No: 8, blits_[idx].reset([blit_lambda, this]() { return blist_lambda(true, queues_[QueueUtility], false); 
  GG: ROCr: InitDma(): InitGWS...
:3:comgrctx.cpp             :33  : 231271552868 us: 141340: [tid:0x7ff31bb32080] Loading COMGR library.
:3:rocdevice.cpp            :209 : 231271552927 us: 141340: [tid:0x7ff31bb32080] Numa selects cpu agent[0]=0x20642a0(fine=0x207b440,coarse=0x2154cd0) for gpu agent=0x21585e0
:3:rocdevice.cpp            :1613: 231271553168 us: 141340: [tid:0x7ff31bb32080] HMM support: 1, xnack: 0, direct host access: 0

:4:rocdevice.cpp            :1920: 231271553538 us: 141340: [tid:0x7ff31bb32080] Allocate hsa host memory 0x7ff310600000, size 0x101000
:4:rocdevice.cpp            :1920: 231271553941 us: 141340: [tid:0x7ff31bb32080] Allocate hsa host memory 0x7ff310400000, size 0x101000
:4:rocdevice.cpp            :2056: 231271554028 us: 141340: [tid:0x7ff31bb32080] Allocate hsa device memory 0x7fef0b400000, size 0x100000
:3:rocdevice.cpp            :209 : 231271554056 us: 141340: [tid:0x7ff31bb32080] Numa selects cpu agent[0]=0x20642a0(fine=0x207b440,coarse=0x2154cd0) for gpu agent=0x21e7f80
:3:rocdevice.cpp            :1613: 231271554174 us: 141340: [tid:0x7ff31bb32080] HMM support: 1, xnack: 0, direct host access: 0

:4:rocdevice.cpp            :1920: 231271554524 us: 141340: [tid:0x7ff31bb32080] Allocate hsa host memory 0x7ff310200000, size 0x101000
:4:rocdevice.cpp            :1920: 231271554917 us: 141340: [tid:0x7ff31bb32080] Allocate hsa host memory 0x7fef0b200000, size 0x101000
:4:rocdevice.cpp            :2056: 231271555006 us: 141340: [tid:0x7ff31bb32080] Allocate hsa device memory 0x7fef0ae00000, size 0x100000
:3:rocdevice.cpp            :209 : 231271555033 us: 141340: [tid:0x7ff31bb32080] Numa selects cpu agent[0]=0x20642a0(fine=0x207b440,coarse=0x2154cd0) for gpu agent=0x21ec330
:3:rocdevice.cpp            :1613: 231271555145 us: 141340: [tid:0x7ff31bb32080] HMM support: 1, xnack: 0, direct host access: 0

:4:rocdevice.cpp            :1920: 231271555481 us: 141340: [tid:0x7ff31bb32080] Allocate hsa host memory 0x7fef0ac00000, size 0x101000
:4:rocdevice.cpp            :1920: 231271555867 us: 141340: [tid:0x7ff31bb32080] Allocate hsa host memory 0x7fef0aa00000, size 0x101000
:4:rocdevice.cpp            :2056: 231271555936 us: 141340: [tid:0x7ff31bb32080] Allocate hsa device memory 0x7fef0a600000, size 0x100000
:3:rocdevice.cpp            :209 : 231271555966 us: 141340: [tid:0x7ff31bb32080] Numa selects cpu agent[0]=0x20642a0(fine=0x207b440,coarse=0x2154cd0) for gpu agent=0x21f0710
:3:rocdevice.cpp            :1613: 231271556081 us: 141340: [tid:0x7ff31bb32080] HMM support: 1, xnack: 0, direct host access: 0

GG: ROCclr: SvmBuffer::malloc entered...
:4:rocdevice.cpp            :1920: 231271556116 us: 141340: [tid:0x7ff31bb32080] Allocate hsa host memory 0x7ff31b992000, size 0xa0
:4:rocdevice.cpp            :1920: 231271556422 us: 141340: [tid:0x7ff31bb32080] Allocate hsa host memory 0x7fef0a400000, size 0x101000
:4:rocdevice.cpp            :1920: 231271556798 us: 141340: [tid:0x7ff31bb32080] Allocate hsa host memory 0x7fef0a200000, size 0x101000
:4:rocdevice.cpp            :2056: 231271556914 us: 141340: [tid:0x7ff31bb32080] Allocate hsa device memory 0x7fef09e00000, size 0x100000
:4:runtime.cpp              :83  : 231271556923 us: 141340: [tid:0x7ff31bb32080] init
:3:hip_context.cpp          :50  : 231271556925 us: 141340: [tid:0x7ff31bb32080] Direct Dispatch: 1
GG: hipamd: ihipMalloc entered...
GG: ROCclr: SvmBuffer::malloc entered...
:4:rocdevice.cpp            :2056: 231271557147 us: 141340: [tid:0x7ff31bb32080] Allocate hsa device memory 0x7fee89c00000, size 0x80000000
:3:rocdevice.cpp            :2095: 231271557153 us: 141340: [tid:0x7ff31bb32080] device=0x21f76b0, freeMem_ = 0x7f000000
:3:hip_memory.cpp           :503 : 231271557160 us: 141340: [tid:0x7ff31bb32080] hipMalloc: Returned hipSuccess : 0x7fee89c00000
It took me 0.0795226 seconds.
:3:hip_memory.cpp           :544 : 231271557182 us: 141340: [tid:0x7ff31bb32080] [32mhipFree ( 0x7fee89c00000 )[0m
GG: ROCclr: VirtualGPU::VirtualGPU (constructor) entered...
GG: ROCclr: VirtualGPU::VirtualGPU: device: 0x21f76b0
GG: ROCclr: VirtualGPU::Create() entered...
  GG: ROCclr: VirtualGPU::Create(): requesting queue, size: 4096
GG: ROCclr: acquireQueue entered...
:3:rocdevice.cpp            :2692: 231271557196 us: 141340: [tid:0x7ff31bb32080] number of allocated hardware queues with low priority: 0, with normal priority: 0, with high priority: 0, maximum per priority is: 4
  GG: ROCclr: queue_size: 4096, queue_max_packets/queue_size_hint: 131072/4096
GG: ROCr:  hsa_queue_create entered...
  GG: ROCr:  agent handle: ?? ,size: 4096, type: 0, source: ?? 
GG: ROCr: GpuAgent::QueueCreate entered...
  GG:QueueCreate(): size: 4096, type: 0
GG: ROCr: GpuAgent::QueueCreate queues_[QueueUtility].touch()...
GG: ROCr: ROCr: InitDma(): LAMBDA: queue_lambda(): entered: 
GG: ROCr: GpuAgent::CreateInterceptibleQueue entered...
GG: ROCr: GpuAgent::QueueCreate entered...
  GG:QueueCreate(): size: 64, type: 0
GG: ROCr: GpuAgent::QueueCreate queues_[QueueUtility].touch()...
  GG: ROCr: GpuAgent::QueueCreate:  newly created AqlQueue, addr/size: 0x22049a0/64
  GG: ROCr: GpuAgent::QueueCreate:  update * queue (from AqlQueue), addr/base_address/size: 0x22049a0/0x7ff31b98e000/64
  GG: ROCr: GpuAgent::QueueCreate:  newly created AqlQueue, addr/size: 0x2205550/4096
  GG: ROCr: GpuAgent::QueueCreate:  update * queue (from AqlQueue), addr/base_address/size: 0x2205550/0x7ff310780000/4096
  GG: ROCclr: acquireQueue: created queue (ptr): 0x7ff31b982000, size: 4096
:3:rocdevice.cpp            :2773: 231271580968 us: 141340: [tid:0x7ff31bb32080] created hardware queue 0x7ff31b982000 with size 4096 with priority 1, cooperative: 0
  GG: ROCclr: VirtualGpu::Create(): create gpu_queue: 0x7ff31b982000
:4:rocdevice.cpp            :1920: 231271581166 us: 141340: [tid:0x7ff31bb32080] Allocate hsa host memory 0x7ff310100000, size 0x80000
GG: ROCclr: BlitProgram::create() entered...
  GG: ROCclr: BlitProgram::create(): kernels: extern void __amd_fillBufferAligned(__global uchar*, __global ushort*, __global uint*, __global ulong*, __constant uchar*, uint, ulong, ulong); extern void __amd_fillBufferAligned2D(__global uchar*, __global ushort*, __global uint*, __global ulong*, __constant uchar*, uint, ulong, ulong, ulong, ulong); extern void __amd_copyBuffer(__global uchar*, __global uchar*, ulong, ulong, ulong, uint); extern void __amd_copyBufferAligned(__global uint*, __global uint*, ulong, ulong, ulong, uint); extern void __amd_copyBufferRect(__global uchar*, __global uchar*, ulong4, ulong4, ulong4); extern void __amd_copyBufferRectAligned(__global uint*, __global uint*, ulong4, ulong4, ulong4); __kernel void __amd_rocclr_fillBufferAligned(__global uchar* bufUChar, __global ushort* bufUShort, __global uint* bufUInt, __global ulong* bufULong, __constant uchar* pattern, uint patternSize, ulong offset, ulong size) { __amd_fillBufferAligned(bufUChar, bufUShort, bufUInt, bufULong, pattern, patternSize, offset, size); } __kernel void __amd_rocclr_fillBufferAligned2D(__global uchar* bufUChar, __global ushort* bufUShort, __global uint* bufUInt, __global ulong* bufULong, __constant uchar* pattern, uint patternSize, ulong offset, ulong width, ulong height, ulong pitch) { __amd_fillBufferAligned2D(bufUChar, bufUShort, bufUInt, bufULong, pattern, patternSize, offset, width, height, pitch); } __kernel void __amd_rocclr_copyBuffer(__global uchar* srcI, __global uchar* dstI, ulong srcOrigin, ulong dstOrigin, ulong size, uint remain) { __amd_copyBuffer(srcI, dstI, srcOrigin, dstOrigin, size, remain); } __kernel void __amd_rocclr_copyBufferAligned(__global uint* src, __global uint* dst, ulong srcOrigin, ulong dstOrigin, ulong size, uint alignment) { __amd_copyBufferAligned(src, dst, srcOrigin, dstOrigin, size, alignment); } __kernel void __amd_rocclr_copyBufferRect(__global uchar* src, __global uchar* dst, ulong4 srcRect, ulong4 dstRect, ulong4 size) { __amd_copyBufferRect(src, dst, srcRect, dstRect, size); } __kernel void __amd_rocclr_copyBufferRectAligned(__global uint* src, __global uint* dst, ulong4 srcRect, ulong4 dstRect, ulong4 size) { __amd_copyBufferRectAligned(src, dst, srcRect, dstRect, size); }extern void __amd_streamOpsWrite(__global uint*, __global ulong*, ulong, ulong); extern void __amd_streamOpsWait(__global uint*,__global ulong*, ulong, ulong, ulong); __kernel void __amd_rocclr_streamOpsWrite(__global uint* ptrInt, __global ulong* ptrUlong, ulong value, ulong sizeBytes) { __amd_streamOpsWrite(ptrInt, ptrUlong, value, sizeBytes); } __kernel void __amd_rocclr_streamOpsWait(__global uint* ptrInt, __global ulong* ptrUlong, ulong value, ulong flags, ulong mask) { __amd_streamOpsWait(ptrInt, ptrUlong, value, flags, mask); }extern void __ockl_gws_init(uint nwm1, uint rid); __kernel void __amd_rocclr_gwsInit(uint value) { __ockl_gws_init(value, 0); }
GG: ROCclr: program(runtimeObject): constructor entered: 
:3:devprogram.cpp           :2705: 231271727632 us: 141340: [tid:0x7ff31bb32080] Using Code Object V4.
GG: ROCclr: -------------------------------
GG: ROCclr: Program(public RuntimeObject)::load() entered...
  GG: ROCclr: Program::(RuntimeObject): Kernel Name: 
GG: ROCclr: bool Program(public HeapObject)::load() entered...
  GG: ROCclr: bool Program(public HeapObject)::load(): Kernel Name: __amd_rocclr_copyBufferAligned, __amd_rocclr_fillBufferAligned2D, 
GG: ROCclr: bool Program(public HeapObject)::loadLC() entered...
GG: ROCclr: setKernels entered...
GG: ROCr:  hsa_executable_freeze() entered...
GG: ROCr: AmdHsaCodeLoader::FreezeExecutable() entered...
GG: ROCr: ExecutableImpl::Freeze() entered...
GG: ROCr: LoaderContext::SegmentFreeze() entered...
GG: ROCr: RegionMemory::Freeze() entered...
GG: ROCr: GpuAgent::DmaCopy(dst, src, size)..entered.
GG: ROCr: GpuAgent::Dmacopy(): return blits_[BlitDevtoDev]->SubmitLinearCopyCommand(dst,src,size)...
    GG: ROCr:: lazy_ptr::print_state: obj.get():  0, target avail?: 1
GG: ROCr: GpuAgent::DmaCopy(): BlitDevToDev: 0, isSMDA?:   GG: ROCr: ROCr: InitDma(): LAMBDA: blits_[BlitDevToDev].reset(<unnamed_lambda>[this]() entered...
GG: ROCr: GpuAgent::CreateBlitKernel() entered...
0
GG: ROCr: BlitKernel::SubmitLinearCopyCommand(dst, src, size): entered.
GG: ROCr: BlitKernel::SubmitLinearCopyCommand(dst, src, size, dep_signals, out_signal): entered.
  GG: ROCr: dst, src: 0x7ff3107d8000, 0x7ff3107d0000size: 20592
  GG: ROCr: num_barrier_packet: 0
  GG: ROCr: total_num_packet: 1
GG: ROCr: print_save_buffer: buffer , size: 4096
  GG: ROCr: num_workitems(aligned): 30720, num_cus_:120 kernel_code: 0x26595b8
  GG: ROCr: src_start/dst_start/phase1_size: 7ff3107d0000/7ff3107d8000/0
  GG: ROCr: phase2_block/phase2_size: 78000/0
  GG: ROCr: phase3_size: 5070
GG: ROCr: BlitKernel::PopulateQueue: entered (2)
  GG: ROCr: index, code_handle, args, grid_size_x, completion_signal: 0, 7ff31b946000, 0x7ff31b948000, 7800, ??? 
  GG: ROCr: (pkt) ---------------------.
  GG: ROCr: (pkt) packet: 0x7ff31b98e000, queue_buffer: 0x7ff31b98e000, index: 0, queue_bitmask_:3f
  GG: ROCr: (pkt) dumpAqlPacket (dispatch) entered.
  GG: ROCr: (pkt) HSA_PACKET_HEADER_TYPE:                             HSA_PACKET_TYPE_KERNEL_DISPATCH
  GG: ROCr: (pkt) HSA_PACKET_HEADER_BARRIER (1-bit):                  0
  GG: ROCr: (pkt) HSA_PACKET_HEADER_(SC)ACQUIRE_FENCE_SCOPE (2-bit):  400
  GG: ROCr: (pkt) HSA_PACKET_HEADER_(SC)ACQUIRE_FENCE_SCOPE (2-bit):  1400
  GG: ROCr: (pkt) workgroup size (x,y,z):                                   40, 1, 1
  GG: ROCr: (pkt) grid size (x,y,z):                                        7800, 1, 1
  GG: ROCr: (pkt) kernel_object:                                            7ff31b946000
  GG: ROCr: (pkt) kernelarg_address:                                        0x7ff31b948000
  GG: ROCr: (pkt) completion signal:                                        7ff31b9b5580
GG: ROCr: GpuAgent::InvalidateCodeCaches()
GG: ROCr: AqlQueue::ExecutePM() entered...
GG: ROCclr: Program(public HeapObject)::runInitKernel() entered...
GG: ROCclr: Program(public HeapObject)::runInitFiniKernel()(2) entered...
:3:devprogram.cpp           :3011: 231271728926 us: 141340: [tid:0x7ff31bb32080] For Init/Fini: Kernel Name: __amd_rocclr_copyBufferAligned
:3:devprogram.cpp           :3011: 231271728929 us: 141340: [tid:0x7ff31bb32080] For Init/Fini: Kernel Name: __amd_rocclr_streamOpsWait
:3:devprogram.cpp           :3011: 231271728931 us: 141340: [tid:0x7ff31bb32080] For Init/Fini: Kernel Name: __amd_rocclr_copyBuffer
:3:devprogram.cpp           :3011: 231271728932 us: 141340: [tid:0x7ff31bb32080] For Init/Fini: Kernel Name: __amd_rocclr_streamOpsWrite
:3:devprogram.cpp           :3011: 231271728934 us: 141340: [tid:0x7ff31bb32080] For Init/Fini: Kernel Name: __amd_rocclr_copyBufferRectAligned
:3:devprogram.cpp           :3011: 231271728935 us: 141340: [tid:0x7ff31bb32080] For Init/Fini: Kernel Name: __amd_rocclr_gwsInit
:3:devprogram.cpp           :3011: 231271728937 us: 141340: [tid:0x7ff31bb32080] For Init/Fini: Kernel Name: __amd_rocclr_copyBufferRect
:3:devprogram.cpp           :3011: 231271728938 us: 141340: [tid:0x7ff31bb32080] For Init/Fini: Kernel Name: __amd_rocclr_fillBufferAligned
:3:devprogram.cpp           :3011: 231271728940 us: 141340: [tid:0x7ff31bb32080] For Init/Fini: Kernel Name: __amd_rocclr_fillBufferAligned2D
:4:rocmemory.cpp            :941 : 231271729001 us: 141340: [tid:0x7ff31bb32080] Locking to pool 0x2154cd0, size 0x1000, HostPtr = 0x22ea000, DevPtr = 0x7ff3107ce000
GG: ROCclr: VirtualGPU::HwQueueTracker::Create() entered...
:4:rocdevice.cpp            :2072: 231271729218 us: 141340: [tid:0x7ff31bb32080] Free hsa memory 0x7fee89c00000
:3:rocdevice.cpp            :2095: 231271729223 us: 141340: [tid:0x7ff31bb32080] device=0x21f76b0, freeMem_ = 0xff000000
:3:hip_memory.cpp           :546 : 231271729228 us: 141340: [tid:0x7ff31bb32080] hipFree: Returned hipSuccess : 
